#ifndef _mod_set_
#define _mod_set_ 1

#include <set>
#include "mod_stl_tree.h"  
#include "mod_stl_set.h"  

template<typename T> class InPlaceAllocator : public std::allocator<T> {
public:
  template<typename U> struct rebind { typedef InPlaceAllocator<U> other; };
  InPlaceAllocator() = default;
  InPlaceAllocator(const InPlaceAllocator& x) = default;
  template<typename U> InPlaceAllocator (const InPlaceAllocator<U>& x) : std::allocator<T>(x) {}
  ~InPlaceAllocator() = default;
  template<typename V>
  T* allocate(const V& val) { return reinterpret_cast<T*>(const_cast<V&>(val)); }
  void deallocate(T*, size_t) {}
};

template <typename _Key, typename _Compare = std::less<_Key>>
using InPlaceSet = modstd::set<_Key,_Compare,InPlaceAllocator<_Key>>;

#endif /* _mod_set_ */
